import telebot
from telebot import types
import time
from datetime import datetime, timedelta
import json
from threading import Thread
from collections import defaultdict

# –ó–∞–≥—Ä—É–∂–∞–µ–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∏–∑ —Ñ–∞–π–ª–∞
def load_schedules():
    with open('schedules.json', 'r', encoding='utf-8') as f:
        return json.load(f)


# –ó–∞–≥—Ä—É–∂–∞–µ–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é
schedules = load_schedules()

# –£–∫–∞–∂–∏—Ç–µ —Å–≤–æ–π —Ç–æ–∫–µ–Ω Telegram-–±–æ—Ç–∞
bot = telebot.TeleBot('7531499134:AAHVFuV9h7-JpuCKSs20ImQpPJxQAOH3mKw')

# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
main_menu = types.ReplyKeyboardMarkup(row_width=1, resize_keyboard=True)
main_menu.add(types.KeyboardButton("üìÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ"))
main_menu.add(types.KeyboardButton("üë§ –ü—Ä–æ—Ñ–∏–ª—å"))

# –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è
user_state = {}
selected_group = {}
selected_week = {}
notifications = defaultdict(dict)  # –•—Ä–∞–Ω–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π


# –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
def notification_checker():
    while True:
        current_time = datetime.now().strftime("%H:%M")
        for user_id, lessons in list(notifications.items()):
            for lesson, notify_time in list(lessons.items()):
                if notify_time == current_time:
                    bot.send_message(user_id, f"–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: —Å–∫–æ—Ä–æ –Ω–∞—á–Ω–µ—Ç—Å—è –∑–∞–Ω—è—Ç–∏–µ *{lesson}*", parse_mode="Markdown")
                    del lessons[lesson]
        time.sleep(30)


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start
@bot.message_handler(commands=['start'])
def start(message):
    user_state[message.chat.id] = {"step": "menu"}
    bot.send_message(
        message.chat.id,
        "–ü—Ä–∏–≤–µ—Ç, —è —Ç–≤–æ–π –±–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç –Ω–∞–ø–æ–º–∏–Ω–∞—Ç—å –æ –Ω–∞—á–∞–ª–µ –∑–∞–Ω—è—Ç–∏–π!",
        reply_markup=main_menu
    )


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "üìÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ"
@bot.message_handler(func=lambda msg: msg.text == "üìÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ")
def choose_week(message):
    user_state[message.chat.id] = {"step": "week"}
    week_markup = types.ReplyKeyboardMarkup(row_width=2, resize_keyboard=True)
    week_markup.add(
        types.KeyboardButton("–¢–µ–∫—É—â–∞—è –Ω–µ–¥–µ–ª—è (16)"),
        types.KeyboardButton("–°–ª–µ–¥—É—é—â–∞—è –Ω–µ–¥–µ–ª—è (17)"),
        types.KeyboardButton("üîô –ù–∞–∑–∞–¥")
    )
    bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –Ω–µ–¥–µ–ª—é:", reply_markup=week_markup)


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –Ω–µ–¥–µ–ª–∏
@bot.message_handler(func=lambda msg: msg.text in ["–¢–µ–∫—É—â–∞—è –Ω–µ–¥–µ–ª—è (16)", "–°–ª–µ–¥—É—é—â–∞—è –Ω–µ–¥–µ–ª—è (17)"])
def choose_group(message):
    week = "16" if "–¢–µ–∫—É—â–∞—è" in message.text else "17"
    selected_week[message.chat.id] = week
    user_state[message.chat.id] = {"step": "group", "week": week}

    group_markup = types.ReplyKeyboardMarkup(row_width=2, resize_keyboard=True)
    for group in schedules[week].keys():
        group_markup.add(types.KeyboardButton(group))
    group_markup.add(types.KeyboardButton("üîô –ù–∞–∑–∞–¥"))

    bot.send_message(
        message.chat.id,
        f"–í—ã –≤—ã–±—Ä–∞–ª–∏ {message.text}. –¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ –≥—Ä—É–ø–ø—É:",
        reply_markup=group_markup
    )


@bot.message_handler(
    func=lambda msg: msg.chat.id in selected_week and msg.text in schedules[selected_week[msg.chat.id]].keys())
def choose_day(message):
    group = message.text
    week = selected_week[message.chat.id]
    selected_group[message.chat.id] = group
    user_state[message.chat.id] = {"step": "day", "group": group, "week": week}

    days_markup = types.ReplyKeyboardMarkup(row_width=2, resize_keyboard=True)
    for day in schedules[week][group].keys():
        days_markup.add(types.KeyboardButton(day))
    days_markup.add(types.KeyboardButton("üîô –ù–∞–∑–∞–¥"))
    days_markup.add(types.KeyboardButton("üîî –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –Ω–∞ –≤—Å—é –Ω–µ–¥–µ–ª—é"))  # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É

    bot.send_message(
        message.chat.id,
        f"–í—ã –≤—ã–±—Ä–∞–ª–∏ –≥—Ä—É–ø–ø—É {group}. –¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏ –∏–ª–∏ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –Ω–∞ –≤—Å—é –Ω–µ–¥–µ–ª—é:",
        reply_markup=days_markup
    )


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "üîî –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –Ω–∞ –≤—Å—é –Ω–µ–¥–µ–ª—é"
@bot.message_handler(func=lambda msg: msg.text == "üîî –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –Ω–∞ –≤—Å—é –Ω–µ–¥–µ–ª—é")
def set_week_notifications(message):
    group = selected_group[message.chat.id]
    week = selected_week[message.chat.id]
    user_notifications = []

    # –ü—Ä–æ—Ö–æ–¥–∏–º –ø–æ –≤—Å–µ–º –¥–Ω—è–º –∏ –∑–∞–Ω—è—Ç–∏—è–º
    for day, lessons in schedules[week][group].items():
        for lesson_name, lesson_details in lessons.items():
            lesson_time = datetime.strptime(lesson_details['time'], "%H:%M")
            notify_time = (lesson_time - timedelta(minutes=15)).strftime("%H:%M")  # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∑–∞ 15 –º–∏–Ω—É—Ç
            notifications[message.chat.id][lesson_name] = notify_time
            user_notifications.append(f"{lesson_name} ({day}) - {notify_time}")

    # –°–æ–æ–±—â–µ–Ω–∏–µ –æ –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è—Ö
    if user_notifications:
        bot.send_message(
            message.chat.id,
            "–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –¥–ª—è —Å–ª–µ–¥—É—é—â–∏—Ö –∑–∞–Ω—è—Ç–∏–π:\n" + "\n".join(user_notifications),
            parse_mode="Markdown"
        )
    else:
        bot.send_message(message.chat.id, "–ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ.")

    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    user_state[message.chat.id] = {"step": "menu"}
    bot.send_message(message.chat.id, "–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.", reply_markup=main_menu)


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –¥–Ω—è –Ω–µ–¥–µ–ª–∏
@bot.message_handler(
    func=lambda msg: msg.chat.id in selected_group and msg.text in schedules[selected_week[msg.chat.id]][
        selected_group[msg.chat.id]])
def show_day_schedule(message):
    group = selected_group[message.chat.id]
    week = selected_week[message.chat.id]
    day = message.text
    user_state[message.chat.id] = {"step": "lesson", "group": group, "week": week, "day": day}

    lessons_markup = types.ReplyKeyboardMarkup(row_width=2, resize_keyboard=True)
    for lesson in schedules[week][group][day]:
        lessons_markup.add(types.KeyboardButton(lesson))
    lessons_markup.add(types.KeyboardButton("üîô –ù–∞–∑–∞–¥"))
    lessons_markup.add(types.KeyboardButton("üîî –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –Ω–∞ –≤—Å–µ –∑–∞–Ω—è—Ç–∏—è –¥–Ω—è"))  # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É

    bot.send_message(message.chat.id, f"–í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–Ω—è—Ç–∏–µ –≤ {day}, –ª–∏–±–æ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –Ω–∞ –≤—Å–µ –∑–∞–Ω—è—Ç–∏—è —ç—Ç–æ–≥–æ –¥–Ω—è:",
                     reply_markup=lessons_markup)


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "üîî –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –Ω–∞ –≤—Å–µ –∑–∞–Ω—è—Ç–∏—è –¥–Ω—è"
@bot.message_handler(func=lambda msg: msg.text == "üîî –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –Ω–∞ –≤—Å–µ –∑–∞–Ω—è—Ç–∏—è –¥–Ω—è")
def set_day_notifications(message):
    group = selected_group[message.chat.id]
    week = selected_week[message.chat.id]
    day = user_state[message.chat.id]["day"]
    user_notifications = []

    # –ü—Ä–æ—Ö–æ–¥–∏–º –ø–æ –≤—Å–µ–º –∑–∞–Ω—è—Ç–∏—è–º –≤ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –¥–µ–Ω—å
    for lesson_name, lesson_details in schedules[week][group][day].items():
        lesson_time = datetime.strptime(lesson_details['time'], "%H:%M")
        notify_time = (lesson_time - timedelta(minutes=15)).strftime("%H:%M")  # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∑–∞ 15 –º–∏–Ω—É—Ç
        notifications[message.chat.id][lesson_name] = notify_time
        user_notifications.append(f"{lesson_name} - {notify_time}")

    # –°–æ–æ–±—â–µ–Ω–∏–µ –æ –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è—Ö
    if user_notifications:
        bot.send_message(
            message.chat.id,
            f"–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –¥–ª—è –∑–∞–Ω—è—Ç–∏–π –≤ {day}:\n" + "\n".join(user_notifications),
            parse_mode="Markdown"
        )
    else:
        bot.send_message(message.chat.id, "–ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ.")
# –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    user_state[message.chat.id] = {"step": "menu"}
    bot.send_message(message.chat.id, "–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.", reply_markup=main_menu)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∑–∞–Ω—è—Ç–∏—è
@bot.message_handler(func=lambda msg: msg.chat.id in selected_group and any(
    msg.text in lessons for lessons in schedules[selected_week[msg.chat.id]][selected_group[msg.chat.id]].values()
))
def set_notification(message):
    group = selected_group[message.chat.id]
    week = selected_week[message.chat.id]
    day = user_state[message.chat.id]["day"]
    lesson_name = message.text
    lesson = schedules[week][group][day][lesson_name]

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω–æ–µ –∑–∞–Ω—è—Ç–∏–µ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    user_state[message.chat.id] = {
        "step": "notification",
        "lesson": lesson_name,
        "lesson_time": lesson['time'],
        "lesson_details": lesson
    }

    # –£–±–∏—Ä–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É, –æ—Å—Ç–∞–≤–ª—è—è —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç
    bot.send_message(
        message.chat.id,
        f"–í—ã –≤—ã–±—Ä–∞–ª–∏ –∑–∞–Ω—è—Ç–∏–µ: *{lesson_name}*\n"
        f"–í—Ä–µ–º—è: {lesson['time']}\n"
        f"–ü–æ–¥–≥—Ä—É–ø–ø–∞: {lesson.get('subgroup', '–ù–µ —É–∫–∞–∑–∞–Ω–∞')}\n"
        f"–ê—É–¥–∏—Ç–æ—Ä–∏—è: {lesson.get('auditory', '–ù–µ —É–∫–∞–∑–∞–Ω–∞')}\n"
        f"–£–∫–∞–∂–∏—Ç–µ –≤—Ä–µ–º—è –¥–ª—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, 15 –º–∏–Ω—É—Ç –¥–æ –Ω–∞—á–∞–ª–∞ –∑–∞–Ω—è—Ç–∏—è):",
        parse_mode="Markdown",
        reply_markup=types.ReplyKeyboardRemove()  # –£–¥–∞–ª—è–µ–º –∫–Ω–æ–ø–∫–∏
    )

# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
@bot.message_handler(func=lambda msg: user_state.get(msg.chat.id, {}).get("step") == "notification")
def handle_reminder(message):
    try:
        reminder_minutes = int(message.text.split()[0])  # –ß–∏—Ç–∞–µ–º –ø–µ—Ä–≤–æ–µ —á–∏—Å–ª–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä, "15")
        lesson_time = datetime.strptime(user_state[message.chat.id]["lesson_time"], "%H:%M")
        notify_time = (lesson_time - timedelta(minutes=reminder_minutes)).strftime("%H:%M")
        lesson = user_state[message.chat.id]["lesson"]

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ
        notifications[message.chat.id][lesson] = notify_time

        bot.send_message(message.chat.id, f"–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –¥–ª—è –∑–∞–Ω—è—Ç–∏—è *{lesson}* —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞ {notify_time}.",
                         parse_mode="Markdown")

        # –ü–µ—Ä–µ—Ö–æ–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –ø–æ—Å–ª–µ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
        user_state[message.chat.id] = {"step": "menu"}
        bot.send_message(message.chat.id, "–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.", reply_markup=main_menu)
    except ValueError:
        bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ –º–∏–Ω—É—Ç (–Ω–∞–ø—Ä–∏–º–µ—Ä, 15).")

import html

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "üë§ –ü—Ä–æ—Ñ–∏–ª—å"
# –ü–æ–∫–∞–∑ –ø—Ä–æ—Ñ–∏–ª—è —Å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
@bot.message_handler(func=lambda msg: msg.text == "üë§ –ü—Ä–æ—Ñ–∏–ª—å")
def show_profile(message):
    user_notifications = notifications.get(message.chat.id, {})

    if user_notifications:
        profile_text = "–í–∞—à–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è:\n\n"
        buttons = types.InlineKeyboardMarkup(row_width=1)

        for lesson, notify_time in user_notifications.items():
            profile_text += f"üìò –ó–∞–Ω—è—Ç–∏–µ: <b>{lesson}</b>\nüïí –í—Ä–µ–º—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è: {notify_time}\n\n"
            # –ö–Ω–æ–ø–∫–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
            buttons.add(
                types.InlineKeyboardButton(
                    text=f"–£–¥–∞–ª–∏—Ç—å: {lesson}",
                    callback_data=f"delete_{lesson}"  # –û—Å—Ç–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –∫–∞–∫ –µ—Å—Ç—å
                )
            )
    else:
        profile_text = "–£ –≤–∞—Å –Ω–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π."
        buttons = None

    # –ö–Ω–æ–ø–∫–∞ "üîô –ù–∞–∑–∞–¥" –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    back_markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    back_markup.add(types.KeyboardButton("üîô –ù–∞–∑–∞–¥"))

    bot.send_message(
        message.chat.id,
        profile_text,
        reply_markup=back_markup,
        parse_mode="HTML",
    )
    if buttons:
        bot.send_message(
            message.chat.id,
            "–í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:",
            reply_markup=buttons
        )


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ —É–¥–∞–ª–µ–Ω–∏—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
@bot.callback_query_handler(func=lambda call: call.data.startswith("delete_"))
def handle_delete_reminder(call):
    lesson_to_delete = call.data.split("delete_")[1]  # –ò–∑–≤–ª–µ–∫–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –∑–∞–Ω—è—Ç–∏—è
    user_id = call.message.chat.id

    # –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ –Ω–∞–∑–≤–∞–Ω–∏–µ –∑–∞–Ω—è—Ç–∏—è –≤ notifications –Ω–µ –∏–∑–º–µ–Ω–µ–Ω–æ
    if user_id in notifications and lesson_to_delete in notifications[user_id]:
        del notifications[user_id][lesson_to_delete]
        bot.answer_callback_query(call.id, f"–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –¥–ª—è '{lesson_to_delete}' —É–¥–∞–ª–µ–Ω–æ.")
        bot.edit_message_text(
            chat_id=call.message.chat.id,
            message_id=call.message.message_id,
            text=f"–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –¥–ª—è –∑–∞–Ω—è—Ç–∏—è <b>{lesson_to_delete}</b> —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–æ.",
            parse_mode="HTML"
        )
    else:
        bot.answer_callback_query(call.id, "–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")

    # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ—Ñ–∏–ª—å
    show_profile(call.message)

# –£–¥–∞–ª–µ–Ω–∏–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
@bot.message_handler(func=lambda msg: msg.text.startswith('/delete_'))
def delete_reminder(message):
    lesson_to_delete = message.text.split('_', 1)[1]  # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –∑–∞–Ω—è—Ç–∏—è
    user_id = message.chat.id

    # –£–¥–∞–ª—è–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –∑–∞–Ω—è—Ç–∏—è
    if user_id in notifications and lesson_to_delete in notifications[user_id]:
        del notifications[user_id][lesson_to_delete]
        bot.send_message(user_id, f"–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –¥–ª—è –∑–∞–Ω—è—Ç–∏—è <b>{lesson_to_delete}</b> –±—ã–ª–æ —É–¥–∞–ª–µ–Ω–æ.", parse_mode="HTML")

        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –≤ –ø—Ä–æ—Ñ–∏–ª—å
        show_profile(message)
    else:
        bot.send_message(user_id, f"–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –¥–ª—è –∑–∞–Ω—è—Ç–∏—è <b>{lesson_to_delete}</b> –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.", parse_mode="HTML")


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "üîô –ù–∞–∑–∞–¥" –¥–ª—è –≤—Å–µ—Ö —à–∞–≥–æ–≤, –≤–∫–ª—é—á–∞—è –ø—Ä–æ—Ñ–∏–ª—å
@bot.message_handler(func=lambda msg: msg.text == "üîô –ù–∞–∑–∞–¥")
def go_back(message):
    current_state = user_state.get(message.chat.id, {})

    if current_state.get("step") == "notification":
        # –ï—Å–ª–∏ –Ω–∞ —à–∞–≥–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –Ω–∞ –≤—ã–±–æ—Ä –∑–∞–Ω—è—Ç–∏—è
        group = selected_group[message.chat.id]
        week = selected_week[message.chat.id]
        day = user_state[message.chat.id]["day"]

        lessons_markup = types.ReplyKeyboardMarkup(row_width=2, resize_keyboard=True)
        for lesson in schedules[week][group][day]:
            lessons_markup.add(types.KeyboardButton(lesson))
        lessons_markup.add(types.KeyboardButton("üîô –ù–∞–∑–∞–¥"))

        bot.send_message(message.chat.id, f"–í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–Ω—è—Ç–∏–µ –≤ {day}:", reply_markup=lessons_markup)

        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ, —á—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞ –≤—ã–±–æ—Ä –∑–∞–Ω—è—Ç–∏—è
        user_state[message.chat.id] = {"step": "lesson", "group": group, "week": week, "day": day}
    elif current_state.get("step") == "lesson":
        # –ï—Å–ª–∏ –Ω–∞ —à–∞–≥–µ –≤—ã–±–æ—Ä–∞ –∑–∞–Ω—è—Ç–∏—è, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –Ω–∞ –≤—ã–±–æ—Ä –¥–Ω—è
        group = selected_group[message.chat.id]
        week = selected_week[message.chat.id]
        day = user_state[message.chat.id]["day"]

        days_markup = types.ReplyKeyboardMarkup(row_width=2, resize_keyboard=True)
        for day_option in schedules[week][group].keys():
            days_markup.add(types.KeyboardButton(day_option))
        days_markup.add(types.KeyboardButton("üîô –ù–∞–∑–∞–¥"))

        bot.send_message(message.chat.id, f"–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏:", reply_markup=days_markup)

        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ, —á—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞ –≤—ã–±–æ—Ä –¥–Ω—è
        user_state[message.chat.id] = {"step": "day", "group": group, "week": week}
    elif current_state.get("step") == "day":
        # –ï—Å–ª–∏ –Ω–∞ —à–∞–≥–µ –≤—ã–±–æ—Ä–∞ –¥–Ω—è, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –Ω–∞ –≤—ã–±–æ—Ä –≥—Ä—É–ø–ø—ã
        group = selected_group[message.chat.id]
        week = selected_week[message.chat.id]

        group_markup = types.ReplyKeyboardMarkup(row_width=2, resize_keyboard=True)
        for group_option in schedules[week].keys():
            group_markup.add(types.KeyboardButton(group_option))
        group_markup.add(types.KeyboardButton("üîô –ù–∞–∑–∞–¥"))

        bot.send_message(message.chat.id, f"–í—ã–±–µ—Ä–∏—Ç–µ –≥—Ä—É–ø–ø—É:", reply_markup=group_markup)

        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ, —á—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞ –≤—ã–±–æ—Ä –≥—Ä—É–ø–ø—ã
        user_state[message.chat.id] = {"step": "group", "week": week}
    elif current_state.get("step") == "group":
        # –ï—Å–ª–∏ –Ω–∞ —à–∞–≥–µ –≤—ã–±–æ—Ä–∞ –≥—Ä—É–ø–ø—ã, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –Ω–∞ –≤—ã–±–æ—Ä –Ω–µ–¥–µ–ª–∏
        week_markup = types.ReplyKeyboardMarkup(row_width=2, resize_keyboard=True)
        week_markup.add(
            types.KeyboardButton("–¢–µ–∫—É—â–∞—è –Ω–µ–¥–µ–ª—è (16)"),
            types.KeyboardButton("–°–ª–µ–¥—É—é—â–∞—è –Ω–µ–¥–µ–ª—è (17)"),
            types.KeyboardButton("üîô –ù–∞–∑–∞–¥")
        )
        bot.send_message(message.chat.id, f"–í—ã–±–µ—Ä–∏—Ç–µ –Ω–µ–¥–µ–ª—é:", reply_markup=week_markup)

        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ, —á—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞ –≤—ã–±–æ—Ä –Ω–µ–¥–µ–ª–∏
        user_state[message.chat.id] = {"step": "week"}
    else:
        # –ï—Å–ª–∏ –Ω–∞ –¥—Ä—É–≥–æ–º —à–∞–≥–µ, –ø—Ä–æ—Å—Ç–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –≤ –º–µ–Ω—é
        user_state[message.chat.id] = {"step": "menu"}
        bot.send_message(message.chat.id, "–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.", reply_markup=main_menu)

# –ó–∞–ø—É—Å–∫ –ø—Ä–æ–≤–µ—Ä–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
thread = Thread(target=notification_checker, daemon=True)
thread.start()

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
bot.polling(none_stop=True)
